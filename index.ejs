<!doctype html>
<html xmlns:og="http://opengraphprotocol.org/schema/">
	<head>
		<meta property="og:title" content="<%= gameName %> - A multiplayer game written in javascript using the HTML5 canvas, node.js, and Socket.IO"/>
		<meta property="og:type" content="website"/>
		<meta property="og:url" content="http://snakes.eric-wieser.tk/"/>
		<meta property="og:description" content="A game for two (or more) players. Control the snakes with the arrow keys and WASD. Eat or be eaten!"/>
		<meta property="og:image" content="http://eric-wieser.tk/images/snaps/snakes.png" />
		<meta property="fb:admins" content="eric.wieser"/>
		<link rel="shortcut icon" href="/favicon.png">
		<link rel="stylesheet" href="/style.css">
		<script src="/socket.io/socket.io.js"></script>
		<script src="/browserify.js"></script>
		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Dosis:300,600|Ubuntu" />

		<title><%= gameName %> - A multiplayer game written in javascript using the HTML5 canvas, node.js, and Socket.IO</title>
		<script type="text/javascript">
		var _gaq = _gaq || [];
		_gaq.push(['_setAccount', 'UA-24953524-2']);
		_gaq.push(['_setDomainName', 'eric-wieser.tk']);
		_gaq.push(['_trackPageview']);

		(function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
		})();
		</script>
	</head>
	<body>
		<div id="fb-root"></div>
		<script type="text/javascript">
			window.fbAsyncInit = function() {
				FB.init({
					appId      : 258769527571740,//'<%= app.id %>', // App ID
					//channelUrl : '<%= url_no_scheme('/channel.html') %>', // Channel File
					status     : true, // check login status
					cookie     : true, // enable cookies to allow the server to access the session
					xfbml      : true // parse XFBML
				});

				// Listen to the auth.login which will be called when the user logs in
				// using the Login button
				FB.Event.subscribe('auth.login', function(response) {
					// We want to reload the page now so PHP can read the cookie that the
					// Javascript SDK sat. But we don't want to use
					// window.location.reload() because if this is in a canvas there was a
					// post made to this page and a reload will trigger a message to the
					// user asking if they want to send data again.
					window.location = window.location;
				});
			};

			// Load the SDK Asynchronously
			$.getScript("//connect.facebook.net/en_US/all.js");
		</script>
		<div id="wrapper"><canvas id="canvas">If you can see this, your browser sucks</canvas></div>
		<div id="top">
			<div id="message"></div>
			<div class="score-bar">
				<div></div>
				<div></div>
				<div></div>
				<div></div>
			</div>
		</div>
		<div id="bottom">
			<ul id="scores"></ul>
			<form id="chat">
				<ul class="history">
				</ul>
				<input />
				<button type="submit" style="display: none"></button>
			</form>
		</div>
		<div id="login" class="vertical-center">
			<div>
				<div class="box">
					<h1><%= gameName %> @ <%= room %> </h1>
					<p>Control the snake by moving the mouse - no clicking required. Eat other snakes, or be eaten. <a href="#" id="about-link">About</a>.</p>
					<form id="join" class="one-box-form">
						<button type="submit">Join the game</button>
						<input id="name" placeholder="Enter your name here" autocomplete="off" autofocus="autofocus" />
					</form>
					<small>Type your name above, and press Enter to join the game</small>
					<fb:login-button>log in with facebook</fb:login-button>
				</div>
			</div>
		</div>
		<div id="about" class="vertical-center" style="display: none">
			<div>
				<div class="box">
					<h1>About <span class="game-name"><%= gameName %></span></h1>
					<p><span class="game-name"><%= gameName %></span> started off as a simple physics engine, with just balls bouncing off each other and the edges of the screen. Then a form of magnetic attraction was simulated. Interestingly, the balls naturally formed into wriggling snake shapes. A couple more tweaks, and a set of balls followed the player. It began to become apparent that there was a potential for a game here. Add a second player, a scoring system, and the ability to eat other balls, and you have a single computer, keyboard-mashing game. You can still play a <a href="/local">2 player</a>, <a href="/local?3">3 player</a>, or even <a href="/local?4">4 player</a> version of the single-computer version.</p>

					<h2>Networking</h2>
					<p><span class="game-name"><%= gameName %></span> needed improving. The controls were terrible, the arena too small, and most keyboards couldn't cope with the strain of 4 users each hammering arrow keys. It needed to go networked. Node.js was the answer, along with Socket.IO. This was an exercise in learning new technologies, and seeing where they led to. </p>

					<h2>Created by <a href="http://eric-wieser.tk/">Eric Wieser</a></h2>
					<p>With thanks to Max Sinclair for allowing a core of his webserver to be devoted to <span class="game-name"><%= gameName %></span>, Luke Suess and Jonathan Laver for game inspiration along the way, and numerous friends for playing, testing, and hacking the game so that it could be improved.</p>
					<p>The inspiration to go networked came from Rob Hawkes' <a href="http://rawkets.com">Rawkets</a></p>
					<p>Browse the source code <a href="http://github.com/eric-wieser/snakes">on github</a>
				</div>
			</div>
		</div>
		<script>
			var events = require('events');
			require('./color');
			require('./snake');
			require('./world');
			require('./ball');
			require('./entity');

			var port = <%- port %>;
			var gameName = <%- JSON.stringify(room) %>;

			var colorId = Math.random();
			var color = Color.niceColor(colorId);
			$('.box').css({
				borderTopColor: color.toString(),
				borderBottomColor: color.toString(),
			});
			$('a').css({
				borderBottomColor: color.toString(),
			});
			$('#login input, h2, a').css({
				color: color.toString()
			});
			$('#about .box').click(function(e) {
				e.stopPropagation();
			});
			if(location.search == "?music") (function(){
				//Do music!
				var clientId = "dd250c3d9ef318565e6f22e871b87fb8";
				var musicUrl = "http://soundcloud.com/alex-nicholls/snakes-theme";
				$.getJSON(
					'http://api.soundcloud.com/resolve.json?callback=?', {
						url: musicUrl,
						client_id: clientId
					}, function(data) {
						if(data.streamable && data.stream_url) {
							var music = new Audio();
							music.src = data.stream_url+'?client_id='+clientId;
							music.loop = true;
							music.play();
						}
					}
				);
			})();


			//Show and hide the about box
			$('#about-link').click(function() {
				$('#login')
					.fadeOut()
					.queue(function(next) { $('#about').fadeIn(next);       })
					.queue(function(next) { $('#about').one('click', next); })
					.queue(function(next) { $('#about').fadeOut(next);      })
					.fadeIn();
				return false;
			})
			window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame  || window.oRequestAnimationFrame || function(callback) {
					window.setTimeout(function() {callback(Date.now())}, 1000 / 60.0);
				};


			//Get canvas stuff
			var canvas = $('#canvas').get(0);
			var width = canvas.width, height = canvas.height;

			$(window).resize(function(){
				width = canvas.width = $(canvas).width();
				height = canvas.height = $(canvas).height();
			}).resize();

			// $(window).resize(function(){
			// 	width = canvas.width = $(canvas).width();
			// 	height = canvas.height = $(canvas).height();
			// }).resize();

			var ctx = canvas.getContext('2d');
			var ball;
			var opponents = {};

			var keycodes = {
				up:    87,
				down:  83,
				left:  65,
				right: 68
			};

			var universe = new World(2000, 2000);

			

			var socket = io.connect(':'+port);
			//var socket = io.connect('/');
			var name;
			var head;
			var heads;
			var viewOrigin = Vector.zero;
			function nextViewOrigin() {
				var x, y
				if(!head) {
					x = (universe.width - width) / 2;
					y = (universe.height - height) / 2;
				} else {
					var border = 20;
					x = head.position.x - width / 2;
					y = head.position.y - height / 2;

					if(x < -border)
						x = -border;
					else if(x > border + universe.width - width)
						x = border + universe.width - width;
					if(universe.width + 2 * border < width)
						x = (universe.width - width) / 2;

					if(y < -border)
						y = -border;
					else if(y > border + universe.height - height)
						y = border + universe.height - height;
					if(universe.height + 2 * border < height)
						y = (universe.height - height) / 2;
				}
				return new Vector(x, y);
			}
			var nameinput = $('#name');
			if(localStorage['name'])
				nameinput.val(localStorage['name']);

			var isTrying = false;
			var playing = false;

			$('#login').hide();
			socket.on('connect', function() {
				socket.emit('room', gameName, function(user) {
					//It knows who we are
					if(user) {
						name = user.name;
						playing = true;
						requestAnimationFrame(draw);
					}
					else $('#login').show();
				});
			});
			$('#join').submit(function() {
				//Stop things happening while the response is being waited for
				if(!isTrying) {
					isTrying = true;
					n = nameinput.val();

					socket.emit('join', {
						name: n,
						color: colorId,
						game: gameName
					}, function(data) {
						if(data === true) {
							localStorage['name'] = name = n;
							requestAnimationFrame(draw);
							$('#login').fadeOut(function() {
								isTrying = false;
								playing = true;
							});
						} else if(data instanceof Object && data.error) {
							alert(data.error);
							isTrying = false;
						}
					});
				}
				return false;
			});

			// socket.on('entityadded', function (data) {
			// 	if(data.i in universe.entities) return;

			// 	var b = new Ball(
			// 		Vector.ify(data.p),
			// 		data.r,
			// 		Color.ify(data.c)
			// 	);
			// 	b._id = data.i; //probably going to regret this
			// 	universe.addEntity(b);
			// });
			// socket.on('entitylost', function (id) {
			// 	delete universe.entities[id];
			// });
			socket.on('servermessage', function (str) {
				$('#message').html(str);
			});
			socket.on('serverstop', function (str) {
				playing = false;
			});
			socket.on('ping', function() {
				socket.emit('ping');
			});
			socket.on('scores', function (scores) {
				//Get the DOM elements
				var scoreList = $('#scores').empty();
				var scoreBar = $('.score-bar').empty();

				if(scores) {
					//Expand to an objects - data sent as array to save space
					scores = scores.map(function(score) {
						return { name: score[0], value: score[1], color: score[2] };
					});

					//Calculate the spacing of the bars
					var unclaimed = 1000 - scores.pluck('value').reduce(function(a, b) { return a + b; });
					var gap = unclaimed / (scores.length - 1);

					//Keep track of leftmost bar
					var left = 0;

					//draw bars
					scores.forEach(function(score) {
						//left
						$('<div />').css({
							backgroundColor: score.color,
							width: (score.value / 10) + '%',
							left:  (left        / 10) + '%'
						}).appendTo(scoreBar);
						left += score.value + gap;
					});

					scores.sort(function(a, b) { return a.score - b.score; })

					//draw numbers and names
					scores.forEach(function(score, i) {
						$('<li />').append(
							$('<span class="name"/>').text(score.name), " ", 
							$('<span />').text(score.value)
						).css('color', score.color).appendTo(scoreList);
					});
				}
			});
			socket.on('entityupdates', function (data) {
				Object.forEach(data.e, function(edata, id) {
					var p = Vector.ify(edata.p);
					var c = Color.ify(edata.c);
					var r = edata.r;
					if(+id in universe.entities) {
						var e = universe.entities[+id];
						e.position = p;
						e.color = c;
						e.radius = r;
					} else {
						var b = new Ball(p,	r, c);
						b._id = +id;
						universe.entities[+id] = b;
					}
				});
				for(id in universe.entities)
					if(!(id in data.e))
						delete universe.entities[id];

				var newHeads = {};
				Object.forEach(data.s, function(id, name) {
					newHeads[name] = universe.entities[id];
				});
				head = newHeads[name];
				heads = newHeads;

				if(playing) socket.emit('playercontrol', target.plus(viewOrigin));
			});
			var target = new Vector();
			$(document).on(navigator.msPointerEnabled ? 'MSPointerMove' : 'mousemove', function(e) {
				var offset = $(canvas).offset();
				target.set(e.pageX - offset.left, e.pageY - offset.top);
			}).keydown(function() {
				if(playing) $('#chat input').focus();

			}).on('touchmove', function(e) {
				var touch = e.touches[0];
				var offset = $(canvas).offset();
				target.set(touch.pageX - offset.left, touch.pageY - offset.top);
				return false;
			});

			$('#chat').submit(function() {
				if(playing) {
					var input = $(this).find('input');
					var msg = input.val();
					input.val('');
					socket.emit('chat', msg);
				}
				return false;
			});

			socket.on('chat', function (data) {
				var name = data.n;
				var color = Color.ify(data.c);
				var message = data.m;
				var history = $('#chat .history');
				//alert(name + ":" + message);
				$('<li />').text(' '+message).prepend(
					$('<span />').css('color', color+"").text(name)
				).appendTo('#chat .history');

				while(history.children().size() > 10)
					history.children().first().remove();
			});
			function drawArrow(x, y, angle) {
				ctx.save();
				ctx.translate(x, y);
				ctx.rotate(angle);
				ctx.beginPath();
				ctx.moveTo(5, 0);
				ctx.lineTo(20,-7.5);
				ctx.lineTo(20, 7.5);
				ctx.restore();
			}
			var lastt = Date.now();
			function draw(t) {
				//Calculate frame time
				var dt = (t - lastt) / 1000.0;
				ctx.clearRect(0, 0, width, height);
				ctx.save();
				viewOrigin = nextViewOrigin();

				ctx.translate(-viewOrigin.x, -viewOrigin.y);
				ctx.globalCompositeOperation = "source-over";
				ctx.fillStyle = "black";
				ctx.fillRect(0, 0, 2000, 2000);

				ctx.globalCompositeOperation = "lighter";
				universe.entities.forEach(function(e) {
					e.drawTo(ctx);
				});
				Object.forEach(heads, function(h) {
					var off = {
						left:   h.position.x + h.radius < viewOrigin.x,
						right:  h.position.x - h.radius > viewOrigin.x + width,
						top:    h.position.y + h.radius < viewOrigin.y,
						bottom: h.position.y - h.radius > viewOrigin.y + height
					}
					off.any = off.right || off.left || off.top || off.bottom;
					if(!off.any) {
						ctx.beginPath();
						ctx.arc(h.position.x, h.position.y, h.radius / 2, 0, Math.PI * 2, false);
						ctx.fillStyle = "white";
						ctx.fill();
					}
					else {
						if(off.left && off.top)
							drawArrow(viewOrigin.x,         viewOrigin.y,          Math.PI / 4);
						else if(off.right && off.top)
							drawArrow(viewOrigin.x + width, viewOrigin.y,          3*Math.PI / 4);
						else if(off.left && off.bottom)
							drawArrow(viewOrigin.x,         viewOrigin.y + height, -Math.PI / 4);
						else if(off.right && off.bottom)
							drawArrow(viewOrigin.x + width, viewOrigin.y + height, -3*Math.PI / 4);

						else if(off.left)
							drawArrow(viewOrigin.x, h.position.y, 0);
						else if(off.right)
							drawArrow(viewOrigin.x + width, h.position.y, Math.PI);
						else if(off.top)
							drawArrow(h.position.x, viewOrigin.y,  Math.PI / 2);
						else if(off.bottom)
							drawArrow(h.position.x, viewOrigin.y + height, -Math.PI / 2);
						
						ctx.fillStyle = h.color+"";
						ctx.fill();
					}
				});
				//prepare for next frame
				lastt = t;
				ctx.restore();
				requestAnimationFrame(draw);
			}
		</script>
	</body>
</html>
